<?php

function entity_tree_add_top($entity_type, $entity) {
  _entity_tree_add($entity_type, $entity, 0);
}

function entity_tree_add_child($entity_type, $entity, $parent_entity_type, $parent_entity) {
  // Currently this supports multiple parents by storing parallel trees.
  // Perhaps we should cut it down to single parents.
  if (is_object($parent_entity)) {
    list($parent_entity_id) = entity_extract_ids($parent_entity_type, $parent_entity);
  }
  else {
    $parent_entity_id = $parent_entity;
  }
  $result = db_query('SELECT parent_id FROM {entity_tree} WHERE entity_type = :parent_entity_type AND entity_id = :parent_entity_id', array(
    ':parent_entity_type' => $parent_entity_type,
    ':parent_entity_id' => $parent_entity_id,
  ));
  foreach ($result as $parent) {
    _entity_tree_add($entity_type, $entity, $parent->parent_id);
  }
}

function _entity_tree_add($entity_type, $entity, $parent_id) {
  _entity_tree_increment_last_character($encoding);
  if (is_object($entity)) {
    list($entity_id) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $entity_id = $entity;
  }
  $id = db_insert('entity_tree')
    ->fields(array('entity_type' => $entity_type, 'entity_id' => $entity_id, 'parent_id' => $parent_id))
    ->execute();
  $encoding = db_query("SELECT MAX(encoding) FROM {entity_tree} WHERE parent_id = :parent_id", array(':parent_id' => $parent_id))->fetchField();
  _entity_tree_increment_last_character($encoding);
  db_update('entity_tree')
    ->fields(array('encoding' => $encoding))
    ->condition('id', $id)
    ->execute();
}

function _entity_tree_increment_last_character(&$encoding) {
  $n = strlen($encoding) - 1;
  $length = 0;
  if (ord($encoding[$n - $length]) > 0x7F) {
    // Backtrack until we find the first byte of the UTF-8 sequence.
    do {
      $length++;
    } while ( (ord($encoding[$n - $length]) & 0xC0) != 0xC0);
  }
  if ($length == 0) {
    // ASCII.
    $codepoint = ord($encoding[$n]);
  }
  else {
    $n -= $length;
    // Convert UTF-8 sequence to Unicode codepoint.
    $mask = ( 1 << (6 - $length)) - 1;
    $codepoint = (ord($encoding[$n]) & $mask) << (6 * $length);
    for ($i = 1; $i <= $length; $i++) {
      $codepoint |= (ord($encoding[$n + $i]) & 0x3F) << (6 * ($length - $i));
    }
  }
  // Increment the codepoint integer.
  $codepoint++;
  // Encode the new integer into UTF-8.
  if ($codepoint <= 0x007F) {
    // ASCII. It's still simple.
    $encoding[$n] = chr($codepoint);
    return;
  }
  // Now, find the length.
  if ($codepoint <= 0x07FF) {
    $length = 1;
  }
  elseif ($codepoint <= 0xFFFF) {
    $length = 2;
  }
  elseif ($codepoint <= 0x1FFFFF) {
    $length = 3;
  }
  elseif ($codepoint <= 0x3FFFFF) {
    $length = 4;
  }
  elseif ($codepoint <= 0x7FFFFF) {
    $length = 5;
  }
  // More bit wizardry in PHP, yay!
  $first_mask = array(0, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC);
  $encoding[$n] = chr($first_mask[$length] | ($codepoint >> (6 * $length)));
  for ($i = 1; $i <= $length; $i++) {
    $encoding[$n + $i] = chr(0x80 | (($codepoint >> (6 * ($length - $i))) & 0x3F));
  }
}
